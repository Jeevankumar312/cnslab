import java.util.Random;
import java.util.Scanner;

public class RSAEncryption {

    // Function to compute GCD
    public static int gcd(int a, int b) {
        return (b == 0) ? a : gcd(b, a % b);
    }

    // Function to compute (base^exp) % mod using modular exponentiation
    public static int modPow(int base, int exp, int mod) {
        int result = 1;
        base %= mod;

        while (exp > 0) {
            if ((exp & 1) == 1)
                result = (result * base) % mod;
            base = (base * base) % mod;
            exp >>= 1;
        }

        return result;
    }

    // Function to find modular inverse of e under mod phi
    public static int modInverse(int e, int phi) {
        int t = 0, t1 = 1;
        int r = phi, r1 = e;

        while (r1 != 0) {
            int q = r / r1;

            int temp = t;
            t = t1;
            t1 = temp - q * t1;

            temp = r;
            r = r1;
            r1 = temp - q * r1;
        }

        if (r > 1) return -1;
        if (t < 0) t += phi;

        return t;
    }

    // Function to check if a number is prime (naive check)
    public static boolean isPrime(int n) {
        if (n <= 1) return false;
        for (int i = 2; i <= Math.sqrt(n); ++i)
            if (n % i == 0)
                return false;
        return true;
    }

    public static void main(String[] args) {
        Random rand = new Random();
        Scanner scanner = new Scanner(System.in);

        // Choose two small primes
        int p = 0, q = 0;
        while (!isPrime(p)) p = rand.nextInt(100) + 50;
        while (!isPrime(q) || q == p) q = rand.nextInt(100) + 50;

        System.out.println("Chosen primes:\n  p = " + p + "\n  q = " + q);

        int n = p * q;
        int phi = (p - 1) * (q - 1);

        // Choose e such that 1 < e < phi and gcd(e, phi) = 1
        int e = 3;
        while (gcd(e, phi) != 1) e += 2;

        // Compute d
        int d = modInverse(e, phi);
        if (d == -1) {
            System.out.println("Modular inverse of e doesn't exist. Exiting...");
            return;
        }

        System.out.println("Public key (e, n): (" + e + ", " + n + ")");
        System.out.println("Private key (d, n): (" + d + ", " + n + ")");

        // Message to encrypt
        System.out.print("\nEnter a number to encrypt (as message): ");
        int message = scanner.nextInt();

        // Encrypt
        int encrypted = modPow(message, e, n);
        System.out.println("Encrypted message: " + encrypted);

        // Decrypt
        int decrypted = modPow(encrypted, d, n);
        System.out.println("Decrypted message: " + decrypted);

        scanner.close();
    }
}
